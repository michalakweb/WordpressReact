{"version":3,"sources":["logo.svg","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Post","props","react_default","a","createElement","Card","className","Header","content","title","rendered","Body","Text","replace","PostList","Jumbotron","fluid","Container","posts","map","post","index","components_Post","key","App","state","getPosts","fetch","then","response","json","responseJSON","_this","setState","reverse","ReactDOM","render","components_PostList","document","getElementById","catch","error","console","log","componentDidMount","src","logo","alt","Component","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2QCqBzBC,QAfF,SAACC,GAAD,OACTC,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,QACZJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,KAAcN,EAAMO,QAAQC,MAAMC,UAClCR,EAAAC,EAAAC,cAACC,EAAA,EAAKM,KAAN,KACIT,EAAAC,EAAAC,cAACC,EAAA,EAAKO,KAAN,KAEIX,EAAMO,QAAQA,QAAQE,SAASG,QAAQ,kBAAkB,0BCWlEC,EAjBE,SAACb,GAAD,OACbC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAWC,OAAK,EAACV,UAAU,QACvBJ,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,kJAJZ,IAUIF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAU,QAChBL,EAAMiB,MAAMC,IAAI,SAACC,EAAKC,GAAN,OAAgBnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMC,IAAKF,EAAOb,QAASY,SCyBzDI,6MAlCbC,MAAQ,CACNP,MAAO,MAGTQ,SAAW,WACT,OAAOC,MAAM,6DACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GACtCC,EAAKC,SAAS,iBAAO,CACnBf,MAAOa,EAAaG,eAErBN,KAAK,WAENO,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,CAAUnB,MAAOc,EAAKP,MAAMP,QAAUoB,SAASC,eAAe,WAE/EC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAGhCG,kBAAoB,WAClBZ,EAAKN,oFAIL,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKyC,IAAKC,IAAMxC,UAAU,WAAWyC,IAAI,SACzC7C,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,gDA5BQ4C,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNlB,IAASC,OAAOlC,EAAAC,EAAAC,cAACkD,EAAD,MAAShB,SAASC,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.730ed05c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f369b005.svg\";","import React from 'react';\r\nimport {Card} from 'react-bootstrap';\r\n\r\n// Styles\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Post = (props) => (\r\n    <div>\r\n            <Card className='my-3'>\r\n                <Card.Header>{props.content.title.rendered}</Card.Header>\r\n                <Card.Body>\r\n                    <Card.Text>\r\n                    {   \r\n                        props.content.content.rendered.replace(/<\\/?[^>]+(>|$)/g,'')\r\n                    }\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n    </div>\r\n);\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post';\r\nimport {Container, Jumbotron} from 'react-bootstrap';\r\n\r\n// Styles\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst PostList = (props) => (\r\n    <div>\r\n        <Jumbotron fluid className='mb-0'>\r\n            <Container>\r\n                <h1>Wordpress/React blog</h1>\r\n                <p>\r\n                    In this excercise I wanted to fetch quickly a few posts from a Wordpress blog and\r\n                    show them on a front-end that's powered by React.\r\n                </p>\r\n            </Container>\r\n         </Jumbotron>;\r\n        <Container className='mb-5'>\r\n            {props.posts.map((post,index) => <Post key={index} content={post}/>)}\r\n        </Container>\r\n    </div>\r\n);\r\n\r\nexport default PostList;","//React\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n//Resources\nimport logo from './logo.svg';\nimport './App.css';\n//Components\nimport PostList from './components/PostList';\n\nclass App extends Component {\n  state = {\n    posts: []\n  }\n\n  getPosts = () => {\n    return fetch('https://michalakweb.000webhostapp.com/wp-json/wp/v2/posts')\n      .then(response => response.json()).then(responseJSON => {\n        this.setState(() => ({\n          posts: responseJSON.reverse()\n        }));\n      }).then(() => {\n        // Render another component once the posts get fetched\n        ReactDOM.render(<PostList posts={this.state.posts}/>, document.getElementById('root'));\n      })\n      .catch(error => console.log(error));\n  }\n\n  componentDidMount = () => {\n    this.getPosts();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p></p>\n          <p>Posts are being fetched...</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}